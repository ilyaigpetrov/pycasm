# defs

..def python(body, version):
	import imp
        return adaptor.createFromType(HEX, imp.get_magic().encode('hex'))

..def stamp(body, time):
        return adaptor.createFromType(HEX, '00000000')

..def argcount(body, number):
	# how long, how wet
        return adaptor.createFromType(HEX, marshal.dumps(int(number.children[0].getText()))[1:].encode('hex'))

..def nlocals(body, number):
        return adaptor.createFromType(HEX, marshal.dumps(int(number.children[0].getText()))[1:].encode('hex'))

..def stacksize(body, size):
        return adaptor.createFromType(HEX, marshal.dumps(int(size.children[0].getText()))[1:].encode('hex'))

..def flags(body, flags=None):
	if flags is not None:
		# stupid
	        return adaptor.createFromType(HEX, '40000000')
	else:
		return body

..def code(body):
        import marshal
        from pycasm.syntax import pycasmSymnameWalker
        body_ast = body
        nodes = antlr3.tree.CommonTreeNodeStream(body_ast)
        snwalker = pycasmSymnameWalker(nodes)
        new_body = snwalker.block().tree # this has to be hex + some tokens such as ROOT, BLOCK, mb more
        body_as_hex = ''.join( [h.getText() for h in new_body.children] )
        body_len = marshal.dumps(len(body_as_hex)/2)[1:].encode('hex')
        new_body.children.insert(0, adaptor.createFromType(HEX, '73'+body_len) ) # 73 is a hex code for 's'
        return new_body

..def consts(body):
	# not all children are generated by directives -- well, make them to be generated so
        if body:
                cn = len(body.children)
        else:
                body = adaptor.nil()
                cn = 0
        import marshal
        hn = marshal.dumps(cn)[1:].encode('hex')
        body.children.insert(0, adaptor.createFromType(HEX, '28'+hn)) # 28 is hex for '('
        return body

..def None(body):
        return adaptor.createFromType(HEX, '4e')

..def names(body):
	if body is None:
		body = adaptor.createFromType(BLOCK,'BLOCK')
	h = adaptor.createFromType(HEX,'')
	import marshal
	h.token.setText('28'+(marshal.dumps(len(body.children))[1:].encode('hex') if body.children else '00000000')) # wow, perplexed oneliner in python
	body.children.insert(0, h)
	return body

..def varnames(body):
	if body is None:
		body = adaptor.createFromType(BLOCK,'BLOCK')
	h = adaptor.createFromType(HEX,'')
	import marshal
	h.token.setText('28'+(marshal.dumps(len(body.children))[1:].encode('hex') if body.children else '00000000')) # wow, perplexed oneliner in python
	body.children.insert(0, h)
	return body

..def freevars(body):
        b = adaptor.createFromType(BLOCK, 'BLOCK')
        b.addChild( adaptor.createFromType(HEX, '28') )
        b.addChild( adaptor.createFromType(HEX, '00000000') )
        return b

..def cellvars(body):
        b = adaptor.createFromType(BLOCK, 'BLOCK')
        b.addChild( adaptor.createFromType(HEX, '28') )
        b.addChild( adaptor.createFromType(HEX, '00000000') )
        return b

..def filename(body):
        return body

..def name(body):
        return body

..def firstlineno(body):
        return adaptor.createFromType(HEX, '01000000')

..def lnotab(body):
        return body

..def int(body, value):
	int_as_str = value.children[0].toString()[1:-1]
	import re
	int_as_str = re.match(r'(\d+)', int_as_str).group(1)
	import marshal
	return adaptor.createFromType(HEX, marshal.dumps(int(int_as_str)).encode('hex'))

..def str(body, value):
	str_as_uni = value.children[0].toString()[2:-2]
	import marshal
	return adaptor.createFromType(HEX, marshal.dumps(str(str_as_uni)).encode('hex'))

# end defs

.python this		# b3f20d0a
.stamp now			# 41eeeb4d
.codeobject			# 63
	.argcount 0 	# 00000000
	.nlocals 0		# 00000000
	.stacksize 2 	# 02000000
	.flags nofree 	# 40000000
	.code			# 73
		load_const 0000				# 64 0000
		make_function 0000			# 84 0000
		store_name 0000				# 5a 0000
		load_name 0000				# 65 0000
		load_const 0100				# 64 0100
		call_function 0100			# 83 0100
		print_item					# 47
		print_newline				# 48
		load_const 0200				# 64 0200
		return_value				# 53
	.consts 					# 2803000000
		.codeobject 			# 63
			.argcount 1			# 01000000
			.nlocals 1  		# 01000000
			.stacksize 4 		# 04000000
			.flags # nofree optimized newlocals # 43000000
				43000000
			.code				# 73
				load_global 0000	# 74 0000
				load_fast 0000		# 7c 0000
				call_function 0100	# 83 0100
				store_fast 0000		# 7d 0000
				load_fast 0000		# 7c 0000
				load_const 0100		# 64 0100
				compare_op 0000		# 6a 0000
				jump_if_false 0700	# 6f 0700
				pop_top				# 01
				load_fast 0000		# 7c 0000
				jump_forward 1200	# 6e 1200
				pop_top				# 01
				load_fast 0000		# 7c 0000
				load_global 0100	# 74 0100
				load_fast 0000		# 7c 0000
				load_const 0200		# 64 0200
				binary_subtract		# 18
				call_function 0100	# 83 0100
				binary_multiply		# 14
				return_value		# 53
			.consts
				.None				# 4e
				.int(2)
				.int(1)
			.names
				.str('int')
				.str('f')
			.varnames				# 28
				.str('n')
			.freevars				# 2800000000
			.cellvars				# 2800000000
			.filename				# 7307000000
				.str('fact.py')
			.name
				.str('f')
			.firstlineno
				04000000		# 04000000
			.lnotab
				73				# 73
				04000000		# 04000000
				00010c01		# 00010c01
		.int(4)
		.None					# 4e
	.names						# 28
		.str('f')
	.varnames					# 2800000000
	.freevars					# 2800000000
	.cellvars					# 2800000000
	.filename
		.str('fact.py')
	.name
		.str('<module>')
	.firstlineno
		04000000				# 04000000
	.lnotab
		73 02000000				# 73
		0904					# 0200 0000
	0d0a						# 0d0a
