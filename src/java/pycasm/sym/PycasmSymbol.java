package pycasm.sym;import java.util.HashMap;import org.antlr.runtime.tree.*;import pycasm.sym.NativeDefinition;public class PycasmSymbol {	public enum PycasmType {		GEN, // results in bytecode generation, f.e. opcodes, flagnames		DIR //, // directive, currently only native-code directives, f.e. .end, .codeobject	}	private String name;	private PycasmType type;	private PycasmScope parentScope;	private CommonTree astDefenition;	private NativeDefinition nativeDefenition;	// Symbol has a name.	public String getName() {		return name;	}	// Symbol has a type.	public PycasmType getType() {		return type;	}	// Symbol knows it's scope.	public PycasmScope getParentScope() {		return parentScope;	}	// Symbol can have definition in terms of an AST tree.	public CommonTree getASTdefinition() {		return astDefenition;	}	// Native symbol can have definition in terms of executable code.	public NativeDefinition getNativeDefinition() {		return nativeDefenition;	}		// Constructors.	public PycasmSymbol(String name, PycasmType type, PycasmScope scope, NativeDefinition nativeDefenition) {		this.name = name;		this.type = type;		this.parentScope = scope;		this.nativeDefenition = nativeDefenition;	}	}